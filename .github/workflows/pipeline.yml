name: provider-pipeline

on:
  workflow_dispatch:
    inputs:
      consumer-branch:
        description: Consumer branch for contract verification
        required: true
        type: string
      branch:
        description: Branch
        required: true
        type: string
        default: master
      record-consumer-undeployment:
        description: Record consumer undeployment for API breaking changes
        required: true
        type: boolean
        default: false
  pull_request:
    branches:
      - master

env:
  PACT_BROKER_BASE_URL: https://danrusu.pactflow.io
  PACT_BROKER_TOKEN: ${{secrets.PACT_BROKER_TOKEN}}
  PACT_CONSUMER: pact-consumer-poc
  PACT_PROVIDER: pact-provider-poc
  API_BASE_URL: http://localhost:4000

  GIT_COMMIT: ${{github.sha}}
  GIT_REF: ${{github.head_ref}} # this works only for PRs

  DEPLOY_ENV: test # set this dynamically

  ACTIONS_ALLOW_UNSECURE_COMMANDS: true # to be able use ::set-env

jobs:
  unit-tests:
    name: Unit tests (fake)
    runs-on: ubuntu-latest
    steps:
      - run: echo "Successfull unit tests"

  verify-consumer-contract:
    name: Contract test - verify consumer contract
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/checkout@v3

      - name: Checkout
        if: ${{ github.event_name == 'workflow_dispatch' }}
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}

      - uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Run server
        run: npm start &

      - name: Save short sha to ENV
        run: |
          echo ::set-env name=SHORT_SHA::$(echo ${GIT_COMMIT:0:7})

      - name: Save branch name to ENV
        run: |
          echo ::set-env name=BRANCH::$(echo $GIT_REF | rev | cut -d'/' -f 1 | rev)

      - name: Verify consumer contract for PRs
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          docker run \
            -e PACT_BROKER_BASE_URL=${{env.PACT_BROKER_BASE_URL}} \
            -e PACT_BROKER_TOKEN=${{env.PACT_BROKER_TOKEN}} \
            pactfoundation/pact-cli:latest verify \
            --provider ${{env.PACT_PROVIDER}} \
            --provider-version-branch ${{env.BRANCH}} \
            --provider-app-version ${{env.SHORT_SHA}} \
            --provider-base-url http://172.17.0.1:1113 \
            --consumer-version-selector '{"deployedOrReleased": true}' \
            --consumer-version-selector '{"mainBranch": true}' \
            --consumer-version-selector '{"matchingBranch": true}' \
            --enable-pending \
            --fail-if-no-pacts-found \
            --publish-verification-results

      - name: Verify consumer contract
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          docker run \
            -e PACT_BROKER_BASE_URL=${{env.PACT_BROKER_BASE_URL}} \
            -e PACT_BROKER_TOKEN=${{env.PACT_BROKER_TOKEN}} \
            pactfoundation/pact-cli:latest verify \
            --provider ${{ env.PACT_PROVIDER }} \
            --provider-version-branch ${{ github.event.inputs.branch }} \
            --provider-app-version ${{ env.SHORT_SHA }} \
            --provider-base-url http://172.17.0.1:1113 \
            --consumer-version-selector '{"branch": "${{ github.event.inputs.consumer-branch }}"}' \
            --enable-pending \
            --fail-if-no-pacts-found \
            --publish-verification-results

  record-consumer-undeployment:
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.record-consumer-undeployment }}
    name: Record consumer undeployment for API breaking changes
    needs: verify-consumer-contract
    runs-on: ubuntu-latest
    steps:
      - name: Save short sha to ENV
        run: |
          echo ::set-env name=SHORT_SHA::$(echo ${GIT_COMMIT:0:7})
      - name: Record deployment of ${{env.PACT_PROVIDER}} with version ${{env.SHORT_SHA}} to '${{env.DEPLOY_ENV}}' environment
        run: |
          docker run \
            -e PACT_BROKER_BASE_URL=${{env.PACT_BROKER_BASE_URL}} \
            -e PACT_BROKER_TOKEN=${{env.PACT_BROKER_TOKEN}} \
            pactfoundation/pact-cli:latest pact-broker record-undeployment \
            --pacticipant ${{env.PACT_CONSUMER}} \
            --environment ${{env.DEPLOY_ENV}}

  can-i-deploy:
    if: always()
    name: Can I deploy
    needs: [verify-consumer-contract, record-consumer-undeployment]
    runs-on: ubuntu-latest
    steps:
      - name: Save short sha to ENV
        run: |
          echo ::set-env name=SHORT_SHA::$(echo ${GIT_COMMIT:0:7})
      - run: |
          docker run \
            -e PACT_BROKER_BASE_URL=${{env.PACT_BROKER_BASE_URL}} \
            -e PACT_BROKER_TOKEN=${{env.PACT_BROKER_TOKEN}} \
            pactfoundation/pact-cli:latest pact-broker can-i-deploy \
            --pacticipant ${{env.PACT_PROVIDER}} \
            --version ${{env.SHORT_SHA}} \
            --to-environment ${{env.DEPLOY_ENV}}

  deploy:
    name: Deploy (fake)
    needs:
      - unit-tests
      - can-i-deploy
    runs-on: ubuntu-latest
    steps:
      - name: Save short sha to ENV
        run: |
          echo ::set-env name=SHORT_SHA::$(echo ${GIT_COMMIT:0:7})
      - run: echo "Deploy ${{env.PACT_PROVIDER}} with version ${{env.SHORT_SHA}} to '${{env.DEPLOY_ENV}}' environment"

  record-deployment:
    name: Record Deployment
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Save short sha to ENV
        run: |
          echo ::set-env name=SHORT_SHA::$(echo ${GIT_COMMIT:0:7})
      - name: Record deployment of ${{env.PACT_PROVIDER}} with version ${{env.SHORT_SHA}} to '${{env.DEPLOY_ENV}}' environment
        run: |
          docker run \
          -e PACT_BROKER_BASE_URL=${{env.PACT_BROKER_BASE_URL}} \
          -e PACT_BROKER_TOKEN=${{env.PACT_BROKER_TOKEN}} \
          pactfoundation/pact-cli:latest pact-broker record-deployment \
          --pacticipant ${{env.PACT_PROVIDER}} \
          --version ${{env.SHORT_SHA}} \
          --environment ${{env.DEPLOY_ENV}}
